# Azure DevOps Pipeline Template for .NET Projects
# This template builds and deploys multiple Azure Functions
# Replace all placeholder values with your actual project configuration

parameters:
  - name: environment
    type: string
    # Example: 'dev', 'staging', 'prod'
  - name: subscriptionName
    type: string
    # this parameter is you azure auth pipeline connection
  - name: yourFunctionName
    type: string

  - name: buildConfiguration
    type: string
    default: 'Release'



stages:
- stage: Build_${{ parameters.environment }}
  jobs:
  - job: BuildAll
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET 8 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        
    - script: dotnet nuget locals all --clear
      displayName: 'Clear NuGet cache'
    
    - task: NuGetCommand@2
      displayName: 'Restore Nuget Packages'
      inputs:
        includeNuGetOrg: true
        command: 'restore'
        feedsToUse: 'config'
        nugetConfigPath: './nuget.config'    # Ensure this config file exists in your repo

    - task: DotNetCoreCLI@2
      displayName: 'Build All Projects'
      inputs:
        command: 'build'
        projects: |
          # List all your .NET projects below
          # Format: ProjectFolder/*.csproj
          # Example: MyApiProject/*.csproj


          Project1/*.csproj        # Replace with your first project folder


          # Add more projects as needed
        arguments: '--configuration $(buildConfiguration)'

    # Example publish task - duplicate this task for each function app
    - task: DotNetCoreCLI@2
      displayName: 'Publish Function App 1'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'Project1/*.csproj'    # Replace with actual project path, the zip file generated will have the same name as the project
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) --runtime win-x64 --self-contained true'
        zipAfterPublish: true


    - task: PublishBuildArtifacts@1
      displayName: 'Publish All Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

- stage: Deploy_${{ parameters.environment }}
  dependsOn: Build_${{ parameters.environment }}
  jobs:
  - job: DeployAll
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'

    # Example deployment task - duplicate this task for each function app
    - task: AzureFunctionApp@1
      displayName: 'Deploy Function App 1'
      inputs:
        azureSubscription: '${{ parameters.subscriptionName }}'
        appType: 'functionApp'
        appName: '${{ parameters.yourFunctionName }}'
        package: '$(System.ArtifactsDirectory)/drop/Project1.zip'    # Make sure this matches your project name
        deploymentMethod: 'auto'

    # Add more deployment tasks as needed for additional function apps